## FragmentShader Shader ##
#=
:: mandatory
>> fragment data generated by the rasterizer
   execute for each fragment(pixel)
   fragment’s color and depth values are computed
<< processed fragment data
=#

# Note that you may need to modify the version number(e.g. 410 here) to fit your specific case.

triangle♡f = """#version 410 core
                out vec4 color;
                void main(void)
                {
                    color = vec4(1.0, 0.0, 0.0, 1.0);
                }"""

triangle♠f = """#version 410 core
                // 'in's
                // interface block
                in TriangleColor
                {
                   vec4 color;
                }trianglecolor;

                // 'out's
                out vec4 color;

                void main(void)
                {
                    color = trianglecolor.color;
                }"""

triangle♢f = """#version 410 core
                // uniforms
                // Default Block Uniform
                uniform vec4 ucolor;

                // 'out's
                out vec4 color;

                void main(void)
                {
                    color = ucolor;
                }"""

